generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGO_URI")
}

model User {
    id            String            @id @map("_id")
    name          String?
    photoProfile  UserPhotoProfile?
    gender        Gender?
    birth         DateTime?         @db.Date
    description   String?
    coinAmount    Int               @default(0)
    matchClass    MatchClass?       @map("match_class")
    passions      UserPassion[]
    createdAt     DateTime?         @default(now())
    updatedAt     DateTime?         @default(now())
    userGallery   UserGallery?      @relation("UserGallery", fields: [userGalleryId], references: [id])
    userGalleryId String?           @unique @db.ObjectId
    Notification  Notification[]    @relation("Notification")
    Blocking      Blocked[]         @relation("Blocking")
    Blocked       Blocked[]         @relation("Blocked")
    sender        UserMatch[]       @relation("MatchSender")
    receiver      UserMatch[]       @relation("MatchReceiver")
    LoginSession  LoginSession?
}

enum MatchClass {
    A
    B
    C
    D
    E
}

model LoginSession {
    id     String      @id @default(auto()) @map("_id") @db.ObjectId
    userId String      @unique
    user   User        @relation(fields: [userId], references: [id])
    data   LoginData[] @unique @map("login_data")
}

type RefreshToken {
    token   String
    expires DateTime @default(now())
}

type LoginData {
    refreshToken RefreshToken @map("refresh_token")
    fcmToken     String       @map("fcm_token")
}

type UserPhotoProfile {
    path      String
    updatedAt DateTime @default(now())
}

enum Gender {
    male
    female
}

type UserPassion {
    name      String
    createdAt DateTime  @default(now())
    deletedAt DateTime?
}

model Passion {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String   @unique
    createdAt DateTime @default(now())
}

model UserGallery {
    id           String         @id @default(auto()) @map("_id") @db.ObjectId
    user         User?          @relation("UserGallery")
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @default(now())
    PhotoGallery PhotoGallery[] @relation("UserGalleryPhoto")
}

model PhotoGallery {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    path          String
    userGalleryId String      @db.ObjectId
    userGallery   UserGallery @relation("UserGalleryPhoto", fields: [userGalleryId], references: [id])
    createdAt     DateTime    @default(now())
    deletedAt     DateTime?
}

enum NotificationType {
    like
    match
    anoucement
    warning
}

model Notification {
    id        String            @id @default(auto()) @map("_id") @db.ObjectId
    userId    String
    user      User              @relation("Notification", fields: [userId], references: [id])
    title     String
    body      String
    data      NotificationData?
    readAt    DateTime?
    type      NotificationType
    createdAt DateTime          @default(now())
}

type NotificationData {
    userId String
}

model Blocked {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    blockerId   String
    blockedId   String
    createdAt   DateTime @default(now())
    userBlocker User     @relation("Blocking", fields: [blockerId], references: [id])
    userBloked  User     @relation("Blocked", fields: [blockedId], references: [id])
}

enum MatchStatus {
    pending
    accepted
    rejected
    ignored
}

model UserMatch {
    id         String      @id @map("_id")
    senderId   String
    receiverId String
    liked      Boolean
    status     MatchStatus
    updatedAt  DateTime    @default(now())
    createdAt  DateTime    @default(now())
    sender     User        @relation("MatchSender", fields: [senderId], references: [id])
    receiver   User        @relation("MatchReceiver", fields: [receiverId], references: [id])
}
